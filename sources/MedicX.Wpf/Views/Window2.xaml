<!--
MedicX
Copyright (C) 2017-2018 Dust in the Wind

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<Window
    x:Class="DustInTheWind.MedicX.Wpf.Views.Window2"

    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:DustInTheWind.MedicX.Wpf"
    xmlns:viewModels="clr-namespace:DustInTheWind.MedicX.Wpf.ViewModels"
    xmlns:core="clr-namespace:System;assembly=mscorlib"

    mc:Ignorable="d"
    Title="Window2"
    Height="480"
    Width="640"
    d:DataContext="{viewModels:MainViewModel2}">

    <Window.Resources>
        <ObjectDataProvider x:Key="EventTypeEnum" MethodName="GetValues" ObjectType="{x:Type core:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="local:EventType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
    </Window.Resources>

    <!--<Grid>

        <ListView
            ItemsSource="{Binding Events}">

            <ListView.ItemTemplate>
                <DataTemplate DataType="local:EventViewModel">
                    <local:EventItem/>
                </DataTemplate>
            </ListView.ItemTemplate>

        </ListView>

    </Grid>-->

    <Grid
        Margin="8">

        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <DataGrid
            Grid.Row="0"
            ItemsSource="{Binding Events}"
            AlternatingRowBackground="AntiqueWhite"
            AutoGenerateColumns="False">

            <DataGrid.Columns>

                <DataGridTextColumn
                    Header="Date"
                    Binding="{Binding Date}"/>

                <DataGridComboBoxColumn
                    Header="Type"
                    SelectedItemBinding="{Binding Type}"
                    ItemsSource="{Binding Source={StaticResource EventTypeEnum}}">

                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="ComboBox">
                            <Setter Property="Height" Value="25" />
                            <Setter Property="VerticalAlignment" Value="Top" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>

                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="ComboBox">
                            <Setter Property="Height" Value="25" />
                            <Setter Property="VerticalAlignment" Value="Top" />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>

                </DataGridComboBoxColumn>

                <DataGridTextColumn
                    Header="Medic"
                    Binding="{Binding Medic}"/>

                <DataGridTextColumn
                    Header="Description"
                    Binding="{Binding Description}">

                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="TextWrapping" Value="Wrap" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>

                    <DataGridTextColumn.EditingElementStyle>
                        <Style TargetType="TextBox">
                            <Setter Property="TextWrapping" Value="Wrap" />
                            <Setter Property="AcceptsReturn" Value="True" />
                        </Style>
                    </DataGridTextColumn.EditingElementStyle>

                </DataGridTextColumn>

            </DataGrid.Columns>

        </DataGrid>

        <StackPanel
            Grid.Row="1"
            FlowDirection="RightToLeft"
            Orientation="Horizontal"
            Margin="0 8 0 0">

            <StackPanel.Resources>
                <Style TargetType="Button">
                    <Setter Property="MinWidth" Value="100"/>
                    <Setter Property="Margin" Value="8 0 0 0"/>
                </Style>
            </StackPanel.Resources>

            <Button
                Content="Add"
                Command="{Binding AddCommand}"
                Margin="0"/>

            <Button
                Content="Remove"
                Command="{Binding RemoveCommand}"/>

            <Button
                Content="Replace"
                Command="{Binding ReplaceCommand}"/>

            <Button
                Content="Clear"
                Command="{Binding ClearCommand}"/>

            <Button
                Content="Move"
                Command="{Binding MoveCommand}"/>

        </StackPanel>

    </Grid>

</Window>